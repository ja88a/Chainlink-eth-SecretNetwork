#
# zookeeper and kafka as ni servicebus
#
# source from: https://github.com/confluentinc/cp-docker-images/tree/5.3.1-post/examples
#
version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=stat"

  kafka:
    # 
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # 
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    ports:
      - 9092:9092
    depends_on:
     - zookeeper
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_CREATE_TOPICS: "ni-test:1:1"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
  # kafdrop:
  #   image: obsidiandynamics/kafdrop:latest
  #   container_name: kafdrop
  #   hostname: kafdrop
  #   environment:
  #     - KAFKA_BROKERCONNECT=kafka:29092,kafka:29092
  #   ports:
  #     - 9000:9000

#   kafka-ui:
#     image: provectuslabs/kafka-ui
#     container_name: kafka-ui
#     ports:
#       - "8080:8080"
# #    restart: always
#     environment:
#       - KAFKA_CLUSTERS_0_NAME=CLRelayGroup-server
#       - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
#       - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181