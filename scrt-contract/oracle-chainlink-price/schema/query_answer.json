{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryAnswer",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "get_latest_round_data"
      ],
      "properties": {
        "get_latest_round_data": {
          "type": "object",
          "required": [
            "latest_round_data",
            "status"
          ],
          "properties": {
            "latest_round_data": {
              "$ref": "#/definitions/LatestRoundData"
            },
            "status": {
              "$ref": "#/definitions/ResponseStatus"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "get_oracle_contract_info"
      ],
      "properties": {
        "get_oracle_contract_info": {
          "type": "object",
          "required": [
            "status",
            "updated_at"
          ],
          "properties": {
            "status": {
              "$ref": "#/definitions/OracleStatus"
            },
            "updated_at": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "get_oracle_config"
      ],
      "properties": {
        "get_oracle_config": {
          "type": "object",
          "required": [
            "config",
            "status"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/OracleConfig"
            },
            "status": {
              "$ref": "#/definitions/ResponseStatus"
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CanonicalAddr": {
      "$ref": "#/definitions/Binary"
    },
    "CurrencyPair": {
      "type": "object",
      "required": [
        "base",
        "quote"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/TokenInfo"
        },
        "quote": {
          "$ref": "#/definitions/TokenInfo"
        }
      }
    },
    "LatestRoundData": {
      "description": "Latest round data for an Oracle of type Aggregator",
      "type": "object",
      "required": [
        "current",
        "updated_at"
      ],
      "properties": {
        "current": {
          "type": "integer",
          "format": "int128"
        },
        "updated_at": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "OracleConfig": {
      "description": "Oracle config",
      "type": "object",
      "required": [
        "data_source",
        "oracle_name",
        "oracle_status",
        "oracle_type",
        "oracle_value_decimals",
        "owner"
      ],
      "properties": {
        "data_source": {
          "type": "string"
        },
        "data_source_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "oracle_description": {
          "type": [
            "string",
            "null"
          ]
        },
        "oracle_name": {
          "type": "string"
        },
        "oracle_price_pair": {
          "anyOf": [
            {
              "$ref": "#/definitions/CurrencyPair"
            },
            {
              "type": "null"
            }
          ]
        },
        "oracle_status": {
          "$ref": "#/definitions/OracleStatus"
        },
        "oracle_type": {
          "$ref": "#/definitions/OracleType"
        },
        "oracle_value_decimals": {
          "type": "integer",
          "format": "int8"
        },
        "owner": {
          "$ref": "#/definitions/CanonicalAddr"
        }
      }
    },
    "OracleStatus": {
      "type": "string",
      "enum": [
        "Testing",
        "Running",
        "Stopped"
      ]
    },
    "OracleType": {
      "type": "string",
      "enum": [
        "PriceFeed",
        "Other"
      ]
    },
    "ResponseStatus": {
      "type": "string",
      "enum": [
        "success",
        "failure"
      ]
    },
    "TokenInfo": {
      "description": "TokenInfo response",
      "type": "object",
      "required": [
        "decimals",
        "name",
        "symbol"
      ],
      "properties": {
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "total_supply": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Uint128": {
      "type": "string"
    }
  }
}
